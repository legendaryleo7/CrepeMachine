@page "/"
@using BlazorApp.Data
@using Blazorise.Charts
@using Blazorise.Charts.Streaming;

@* TODO: Uncomment this line and comment out the mock service. *@
@* @inject ReadSerialPortService _readSerialPortService *@
@inject MockReadSerialPortService _readSerialPortService

@inject CrepeMachine _crepeMachine

<PageTitle>Crepes</PageTitle>
<Layout>
    <LayoutHeader>
        @* See Flex rules at https://blazorise.com/docs/helpers/utilities *@
        <Div Flex="Flex.JustifyContent.Between" Margin="Margin.Is3.FromBottom">
            <DisplayHeading Size="DisplayHeadingSize.Is1">La Creperie</DisplayHeading>
            <Heading Size="HeadingSize.Is1">@_crepeMachine.TemperatureOneCelsius.ToString("F1")° / @_crepeMachine.TemperatureTwoCelsius.ToString("F1")°</Heading>
            <Heading Size="HeadingSize.Is1">@_crepeMachine.PowerOne.ToString("P0") / @_crepeMachine.PowerTwo.ToString("P0")</Heading>
        </Div>
    </LayoutHeader>
    <LayoutContent>
        
        @* See API documentation at https://blazorise.com/docs/extensions/chart *@
        <LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
            
            @* See API documentation at https://blazorise.com/docs/extensions/chart-live *@
            <ChartStreaming TItem="LiveDataPoint" Options="@chartStreamingOptions"
                Refreshed="@OnHorizontalLineRefreshed" />
        </LineChart>   
    </LayoutContent>
</Layout>

@code {
    LineChart<LiveDataPoint> horizontalLineChart;

    // See source at https://github.com/Megabit/Blazorise/blob/67da3e1fb3256f83f25eb378026eda10768322b5/Source/Extensions/Blazorise.Charts.Streaming/ChartStreamingOptions.cs
    ChartStreamingOptions chartStreamingOptions = new ChartStreamingOptions 
    {         
        // Delay added to the chart in milliseconds so that upcoming values are known before lines are plotted. This makes the chart look like a continual stream rather than very jumpy on the right hand side. Specify the maximum expected delay.
        Delay = 500, 

        // Duration of the chart in milliseconds (how much time of data it will show).
        Duration = 60 * 1000,

        // Refresh interval of data in milliseconds. onRefresh callback function will be called at this interval.
        Refresh = 1000,
    };

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };

    List<string> backgroundColors = new List<string> { 
        ChartColor.FromRgba( 255, 99, 132, 0.2f ), 
        ChartColor.FromRgba( 54, 162, 235, 0.2f ), 
        ChartColor.FromRgba( 255, 206, 86, 0.2f ), 
        ChartColor.FromRgba( 75, 192, 192, 0.2f ),
        ChartColor.FromRgba( 153, 102, 255, 0.2f ), 
        ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
        
    List<string> borderColors = new List<string> 
    { 
        ChartColor.FromRgba( 255, 99, 132, 1f ), 
        ChartColor.FromRgba( 54, 162, 235, 1f ), 
        ChartColor.FromRgba( 255, 206, 86, 1f ), 
        ChartColor.FromRgba( 75, 192, 192, 1f ), 
        ChartColor.FromRgba( 153, 102, 255, 1f ), 
        ChartColor.FromRgba( 255, 159, 64, 1f ) 
    };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }
    
    // Seems like there is more strongly typed version of this that is now supported, but when
    // the demo code was released it was was done this way because it gets serialized and sent 
    // over to ChartJS. I wonder if it supports the additional options that ChartJS supports.
    // See https://blazorise.com/docs/extensions/chart (at the very bottom)
    // TODO: See if we can pass options like Axis Range - see https://www.chartjs.org/docs/3.3.0/axes/#axis-range-settings
    // Source for Strongly Typed Version: https://github.com/Megabit/Blazorise/tree/76f87f2e0ba7710a79b05807037ae55ebd30784b/Source/Extensions/Blazorise.Charts/Options
    object horizontalLineChartOptions = new
    {
        Title = new
        {
            Display = true,
            Text = "Crepe Maker"
        },
        Scales = new
        {
            YAxes = new object[]
            {
                new {
                    ScaleLabel = new 
                    {
                        Display = true, 
                        LabelString = "Temperature" 
                    },
                },
            }
        },
        Tooltips = new
        {
            Mode = "nearest",
            Intersect = false
        },
        Hover = new
        {
            Mode = "nearest",
            Intersect = false
        }
    };

    Timer? _updateTimer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 3000);
    }

    public async Task GetValue()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        _updateTimer?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
            HandleRedraw(horizontalLineChart, GetLineChartDataset1, GetLineChartDataSet2));
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params
    Func<TDataSet>[] getDataSets)
    where TDataSet : ChartDataset<TItem>
    where TOptions : ChartOptions
    where TModel : ChartModel
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = "Left",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            LineTension = 0.5f,
            CubicInterpolationMode = "monotone",
            BorderDash = new List<int> { 8, 4 },
        };
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataSet2()
        {
            return new LineChartDataset<LiveDataPoint>
                {
                    Data = new List<LiveDataPoint>(),
                    Label = "Right",
                    BackgroundColor = backgroundColors[0],
                    BorderColor = borderColors[1],
                    Fill = false,
                    LineTension = 0.5f,
                    CubicInterpolationMode = "monotone", 
                    BorderDash = new List<int> { 8,4 },
                };
        }

    // Seems to be the method called to get new data for the chart
    Task OnHorizontalLineRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        // This method is called once per data series. Pay attention to the dataset index.
        // 0 = Left burner
        // 1 = Right burner
        data.Value = new LiveDataPoint
        {
            X = _crepeMachine.LastUpdated,
            Y = data.DatasetIndex == 0 
                ? _crepeMachine.TemperatureOneCelsius 
                : _crepeMachine.TemperatureTwoCelsius,
        };
        
        return Task.CompletedTask;
    }
}
